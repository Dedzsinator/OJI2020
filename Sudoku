#include <fstream>
using namespace std;

ifstream f("in.in");
ofstream g("out.out");

bool noLoc(int grid[9][9],
	int& row, int& col);

bool ok(int grid[9][9], int row,
	int col, int num);

bool Solve(int grid[9][9]) {
	int row, col;

	if (!noLoc(grid, row, col))
		return true;

	for (int num = 1; num <= 9; num++) {
		if (ok(grid, row, col, num)) {
			grid[row][col] = num;

			if (Solve(grid))
				return true;

			grid[row][col] = 0;
		}
	}
	return false;
}

bool noLoc(int grid[9][9],
	int& row, int& col) {
	for (row = 0; row < 9; row++)
		for (col = 0; col < 9; col++)
			if (grid[row][col] == 0)
				return true;
	return false;
}

bool noRow(int grid[9][9], int row, int num) {
	for (int col = 0; col < 9; col++)
		if (grid[row][col] == num)
			return true;
	return false;
}

bool noCol(int grid[9][9], int col, int num) {
	for (int row = 0; row < 9; row++)
		if (grid[row][col] == num)
			return true;
	return false;
}

bool used(int grid[9][9], int startR,
	int StartC, int num) {
	for (int row = 0; row < 3; row++)
		for (int col = 0; col < 3; col++)
			if (grid[row + startR]
				[col + StartC] == num)
				return true;
	return false;
}

bool ok(int grid[9][9], int row,
	int col, int num) {

	return !noRow(grid, row, num) &&
		!noCol(grid, col, num) &&
		!used(grid, row - row % 3,
			col - col % 3, num) &&
		grid[row][col] == 0;
}

void readout(int grid[9][9]) {
	for (int row = 0; row < 9; row++) {
		for (int col = 0; col < 9; col++)
			g << grid[row][col] << " ";
		g << endl;
	}
}

int main() {
	int grid[9][9];
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			f >> grid[i][j];
		}
	}
	if (Solve(grid) == true)
		readout(grid);
	else
		g << "Nincs megoldas";

	return 0;
}
